name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: |
          pytest

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          # Build and tag image
          docker build -t $DOCKER_USERNAME/fastapi-app:latest .
          docker build -t $DOCKER_USERNAME/fastapi-app:${{ github.sha }} .
          
          # Push images
          docker push $DOCKER_USERNAME/fastapi-app:latest
          docker push $DOCKER_USERNAME/fastapi-app:${{ github.sha }}

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: DOCKER_USERNAME,DOCKER_PASSWORD
          script: |
            cd fastapi-app

            # Create docker-compose.prod.yml from secret
            echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > docker-compose.prod.yml

            # Create .env file from secrets
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOF

            # Verify docker-compose file
            docker-compose -f docker-compose.prod.yml config || {
              echo "Error in Docker Compose file";
              exit 1;
            }

            # Login to Docker Hub
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

            # Pull new images
            docker-compose -f docker-compose.prod.yml pull

            # Stop and remove old containers
            docker-compose -f docker-compose.prod.yml down || true

            # Start new containers
            docker-compose -f docker-compose.prod.yml up -d

            # Clean up old images
            docker image prune -f

            # Wait for services to be ready
            timeout 120 bash -c '
              until curl -f http://localhost:8000/health; do
                echo "Waiting for FastAPI to be ready...";
                sleep 5;
              done
            ' || {
              echo "Deployment failed - service not responding";
              docker-compose -f docker-compose.prod.yml logs;
              exit 1;
            }

            echo "Deployment successful!"

      - name: Cleanup
        if: always()
        run: |
          docker logout
          rm -rf /tmp/.buildx-cache